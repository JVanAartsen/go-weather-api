/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
	"fmt"
)

// JsonLdContext struct for JsonLdContext
type JsonLdContext struct {
	Array *Array
	map[string]interface{} *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *JsonLdContext) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Array
	err = json.Unmarshal(data, &dst.Array);
	if err == nil {
		jsonArray, _ := json.Marshal(dst.Array)
		if string(jsonArray) == "{}" { // empty struct
			dst.Array = nil
		} else {
			return nil // data stored in dst.Array, return on the first match
		}
	} else {
		dst.Array = nil
	}

	// try to unmarshal JSON data into map[string]interface{}
	err = json.Unmarshal(data, &dst.map[string]interface{});
	if err == nil {
		jsonmap[string]interface{}, _ := json.Marshal(dst.map[string]interface{})
		if string(jsonmap[string]interface{}) == "{}" { // empty struct
			dst.map[string]interface{} = nil
		} else {
			return nil // data stored in dst.map[string]interface{}, return on the first match
		}
	} else {
		dst.map[string]interface{} = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(JsonLdContext)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *JsonLdContext) MarshalJSON() ([]byte, error) {
	if src.Array != nil {
		return json.Marshal(&src.Array)
	}

	if src.map[string]interface{} != nil {
		return json.Marshal(&src.map[string]interface{})
	}

	return nil, nil // no data in anyOf schemas
}

type NullableJsonLdContext struct {
	value *JsonLdContext
	isSet bool
}

func (v NullableJsonLdContext) Get() *JsonLdContext {
	return v.value
}

func (v *NullableJsonLdContext) Set(val *JsonLdContext) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonLdContext) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonLdContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonLdContext(val *JsonLdContext) *NullableJsonLdContext {
	return &NullableJsonLdContext{value: val, isSet: true}
}

func (v NullableJsonLdContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonLdContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


