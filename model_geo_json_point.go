/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
)

// GeoJSONPoint struct for GeoJSONPoint
type GeoJSONPoint struct {
	Type string `json:"type"`
	// A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.
	Coordinates []float32 `json:"coordinates"`
	// A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
	Bbox []float32 `json:"bbox,omitempty"`
}

// NewGeoJSONPoint instantiates a new GeoJSONPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONPoint(type_ string, coordinates []float32) *GeoJSONPoint {
	this := GeoJSONPoint{}
	this.Type = type_
	this.Coordinates = coordinates
	return &this
}

// NewGeoJSONPointWithDefaults instantiates a new GeoJSONPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONPointWithDefaults() *GeoJSONPoint {
	this := GeoJSONPoint{}
	return &this
}

// GetType returns the Type field value
func (o *GeoJSONPoint) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GeoJSONPoint) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GeoJSONPoint) SetType(v string) {
	o.Type = v
}

// GetCoordinates returns the Coordinates field value
func (o *GeoJSONPoint) GetCoordinates() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value
// and a boolean to check if the value has been set.
func (o *GeoJSONPoint) GetCoordinatesOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coordinates, true
}

// SetCoordinates sets field value
func (o *GeoJSONPoint) SetCoordinates(v []float32) {
	o.Coordinates = v
}

// GetBbox returns the Bbox field value if set, zero value otherwise.
func (o *GeoJSONPoint) GetBbox() []float32 {
	if o == nil || o.Bbox == nil {
		var ret []float32
		return ret
	}
	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoJSONPoint) GetBboxOk() ([]float32, bool) {
	if o == nil || o.Bbox == nil {
		return nil, false
	}
	return o.Bbox, true
}

// HasBbox returns a boolean if a field has been set.
func (o *GeoJSONPoint) HasBbox() bool {
	if o != nil && o.Bbox != nil {
		return true
	}

	return false
}

// SetBbox gets a reference to the given []float32 and assigns it to the Bbox field.
func (o *GeoJSONPoint) SetBbox(v []float32) {
	o.Bbox = v
}

func (o GeoJSONPoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["coordinates"] = o.Coordinates
	}
	if o.Bbox != nil {
		toSerialize["bbox"] = o.Bbox
	}
	return json.Marshal(toSerialize)
}

type NullableGeoJSONPoint struct {
	value *GeoJSONPoint
	isSet bool
}

func (v NullableGeoJSONPoint) Get() *GeoJSONPoint {
	return v.value
}

func (v *NullableGeoJSONPoint) Set(val *GeoJSONPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONPoint(val *GeoJSONPoint) *NullableGeoJSONPoint {
	return &NullableGeoJSONPoint{value: val, isSet: true}
}

func (v NullableGeoJSONPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


