/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
)

// AlertsTypes200Response struct for AlertsTypes200Response
type AlertsTypes200Response struct {
	// A list of recognized event types
	EventTypes []string `json:"eventTypes,omitempty"`
}

// NewAlertsTypes200Response instantiates a new AlertsTypes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertsTypes200Response() *AlertsTypes200Response {
	this := AlertsTypes200Response{}
	return &this
}

// NewAlertsTypes200ResponseWithDefaults instantiates a new AlertsTypes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertsTypes200ResponseWithDefaults() *AlertsTypes200Response {
	this := AlertsTypes200Response{}
	return &this
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *AlertsTypes200Response) GetEventTypes() []string {
	if o == nil || o.EventTypes == nil {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertsTypes200Response) GetEventTypesOk() ([]string, bool) {
	if o == nil || o.EventTypes == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *AlertsTypes200Response) HasEventTypes() bool {
	if o != nil && o.EventTypes != nil {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *AlertsTypes200Response) SetEventTypes(v []string) {
	o.EventTypes = v
}

func (o AlertsTypes200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTypes != nil {
		toSerialize["eventTypes"] = o.EventTypes
	}
	return json.Marshal(toSerialize)
}

type NullableAlertsTypes200Response struct {
	value *AlertsTypes200Response
	isSet bool
}

func (v NullableAlertsTypes200Response) Get() *AlertsTypes200Response {
	return v.value
}

func (v *NullableAlertsTypes200Response) Set(val *AlertsTypes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertsTypes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertsTypes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertsTypes200Response(val *AlertsTypes200Response) *NullableAlertsTypes200Response {
	return &NullableAlertsTypes200Response{value: val, isSet: true}
}

func (v NullableAlertsTypes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertsTypes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


