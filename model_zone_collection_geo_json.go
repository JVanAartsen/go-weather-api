/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
)

// ZoneCollectionGeoJson struct for ZoneCollectionGeoJson
type ZoneCollectionGeoJson struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	Type string `json:"type"`
	Features []ZoneGeoJsonAllOf `json:"features"`
}

// NewZoneCollectionGeoJson instantiates a new ZoneCollectionGeoJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneCollectionGeoJson(type_ string, features []ZoneGeoJsonAllOf) *ZoneCollectionGeoJson {
	this := ZoneCollectionGeoJson{}
	this.Type = type_
	this.Features = features
	return &this
}

// NewZoneCollectionGeoJsonWithDefaults instantiates a new ZoneCollectionGeoJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneCollectionGeoJsonWithDefaults() *ZoneCollectionGeoJson {
	this := ZoneCollectionGeoJson{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ZoneCollectionGeoJson) GetContext() JsonLdContext {
	if o == nil || o.Context == nil {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCollectionGeoJson) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ZoneCollectionGeoJson) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *ZoneCollectionGeoJson) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetType returns the Type field value
func (o *ZoneCollectionGeoJson) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ZoneCollectionGeoJson) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ZoneCollectionGeoJson) SetType(v string) {
	o.Type = v
}

// GetFeatures returns the Features field value
func (o *ZoneCollectionGeoJson) GetFeatures() []ZoneGeoJsonAllOf {
	if o == nil {
		var ret []ZoneGeoJsonAllOf
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *ZoneCollectionGeoJson) GetFeaturesOk() ([]ZoneGeoJsonAllOf, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *ZoneCollectionGeoJson) SetFeatures(v []ZoneGeoJsonAllOf) {
	o.Features = v
}

func (o ZoneCollectionGeoJson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["@context"] = o.Context
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["features"] = o.Features
	}
	return json.Marshal(toSerialize)
}

type NullableZoneCollectionGeoJson struct {
	value *ZoneCollectionGeoJson
	isSet bool
}

func (v NullableZoneCollectionGeoJson) Get() *ZoneCollectionGeoJson {
	return v.value
}

func (v *NullableZoneCollectionGeoJson) Set(val *ZoneCollectionGeoJson) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneCollectionGeoJson) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneCollectionGeoJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneCollectionGeoJson(val *ZoneCollectionGeoJson) *NullableZoneCollectionGeoJson {
	return &NullableZoneCollectionGeoJson{value: val, isSet: true}
}

func (v NullableZoneCollectionGeoJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneCollectionGeoJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


