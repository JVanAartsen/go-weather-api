/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
)

// ObservationStationGeoJsonAllOf struct for ObservationStationGeoJsonAllOf
type ObservationStationGeoJsonAllOf struct {
	Properties *ObservationStation `json:"properties,omitempty"`
}

// NewObservationStationGeoJsonAllOf instantiates a new ObservationStationGeoJsonAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationStationGeoJsonAllOf() *ObservationStationGeoJsonAllOf {
	this := ObservationStationGeoJsonAllOf{}
	return &this
}

// NewObservationStationGeoJsonAllOfWithDefaults instantiates a new ObservationStationGeoJsonAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationStationGeoJsonAllOfWithDefaults() *ObservationStationGeoJsonAllOf {
	this := ObservationStationGeoJsonAllOf{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ObservationStationGeoJsonAllOf) GetProperties() ObservationStation {
	if o == nil || o.Properties == nil {
		var ret ObservationStation
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationGeoJsonAllOf) GetPropertiesOk() (*ObservationStation, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ObservationStationGeoJsonAllOf) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given ObservationStation and assigns it to the Properties field.
func (o *ObservationStationGeoJsonAllOf) SetProperties(v ObservationStation) {
	o.Properties = &v
}

func (o ObservationStationGeoJsonAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableObservationStationGeoJsonAllOf struct {
	value *ObservationStationGeoJsonAllOf
	isSet bool
}

func (v NullableObservationStationGeoJsonAllOf) Get() *ObservationStationGeoJsonAllOf {
	return v.value
}

func (v *NullableObservationStationGeoJsonAllOf) Set(val *ObservationStationGeoJsonAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationStationGeoJsonAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationStationGeoJsonAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationStationGeoJsonAllOf(val *ObservationStationGeoJsonAllOf) *NullableObservationStationGeoJsonAllOf {
	return &NullableObservationStationGeoJsonAllOf{value: val, isSet: true}
}

func (v NullableObservationStationGeoJsonAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationStationGeoJsonAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


