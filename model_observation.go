/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
	"time"
)

// Observation struct for Observation
type Observation struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	// A geometry represented in Well-Known Text (WKT) format.
	Geometry NullableString `json:"geometry,omitempty"`
	Id *string `json:"@id,omitempty"`
	Type *string `json:"@type,omitempty"`
	Elevation *QuantitativeValue `json:"elevation,omitempty"`
	Station *string `json:"station,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	RawMessage *string `json:"rawMessage,omitempty"`
	TextDescription *string `json:"textDescription,omitempty"`
	// Deprecated
	Icon *string `json:"icon,omitempty"`
	PresentWeather []MetarPhenomenon `json:"presentWeather,omitempty"`
	Temperature *QuantitativeValue `json:"temperature,omitempty"`
	Dewpoint *QuantitativeValue `json:"dewpoint,omitempty"`
	WindDirection *QuantitativeValue `json:"windDirection,omitempty"`
	WindSpeed *QuantitativeValue `json:"windSpeed,omitempty"`
	WindGust *QuantitativeValue `json:"windGust,omitempty"`
	BarometricPressure *QuantitativeValue `json:"barometricPressure,omitempty"`
	SeaLevelPressure *QuantitativeValue `json:"seaLevelPressure,omitempty"`
	Visibility *QuantitativeValue `json:"visibility,omitempty"`
	MaxTemperatureLast24Hours *QuantitativeValue `json:"maxTemperatureLast24Hours,omitempty"`
	MinTemperatureLast24Hours *QuantitativeValue `json:"minTemperatureLast24Hours,omitempty"`
	PrecipitationLastHour *QuantitativeValue `json:"precipitationLastHour,omitempty"`
	PrecipitationLast3Hours *QuantitativeValue `json:"precipitationLast3Hours,omitempty"`
	PrecipitationLast6Hours *QuantitativeValue `json:"precipitationLast6Hours,omitempty"`
	RelativeHumidity *QuantitativeValue `json:"relativeHumidity,omitempty"`
	WindChill *QuantitativeValue `json:"windChill,omitempty"`
	HeatIndex *QuantitativeValue `json:"heatIndex,omitempty"`
	CloudLayers []ObservationCloudLayersInner `json:"cloudLayers,omitempty"`
}

// NewObservation instantiates a new Observation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservation() *Observation {
	this := Observation{}
	return &this
}

// NewObservationWithDefaults instantiates a new Observation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationWithDefaults() *Observation {
	this := Observation{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Observation) GetContext() JsonLdContext {
	if o == nil || o.Context == nil {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Observation) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *Observation) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Observation) GetGeometry() string {
	if o == nil || o.Geometry.Get() == nil {
		var ret string
		return ret
	}
	return *o.Geometry.Get()
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Observation) GetGeometryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geometry.Get(), o.Geometry.IsSet()
}

// HasGeometry returns a boolean if a field has been set.
func (o *Observation) HasGeometry() bool {
	if o != nil && o.Geometry.IsSet() {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given NullableString and assigns it to the Geometry field.
func (o *Observation) SetGeometry(v string) {
	o.Geometry.Set(&v)
}
// SetGeometryNil sets the value for Geometry to be an explicit nil
func (o *Observation) SetGeometryNil() {
	o.Geometry.Set(nil)
}

// UnsetGeometry ensures that no value is present for Geometry, not even an explicit nil
func (o *Observation) UnsetGeometry() {
	o.Geometry.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Observation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Observation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Observation) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Observation) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Observation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Observation) SetType(v string) {
	o.Type = &v
}

// GetElevation returns the Elevation field value if set, zero value otherwise.
func (o *Observation) GetElevation() QuantitativeValue {
	if o == nil || o.Elevation == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.Elevation
}

// GetElevationOk returns a tuple with the Elevation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetElevationOk() (*QuantitativeValue, bool) {
	if o == nil || o.Elevation == nil {
		return nil, false
	}
	return o.Elevation, true
}

// HasElevation returns a boolean if a field has been set.
func (o *Observation) HasElevation() bool {
	if o != nil && o.Elevation != nil {
		return true
	}

	return false
}

// SetElevation gets a reference to the given QuantitativeValue and assigns it to the Elevation field.
func (o *Observation) SetElevation(v QuantitativeValue) {
	o.Elevation = &v
}

// GetStation returns the Station field value if set, zero value otherwise.
func (o *Observation) GetStation() string {
	if o == nil || o.Station == nil {
		var ret string
		return ret
	}
	return *o.Station
}

// GetStationOk returns a tuple with the Station field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetStationOk() (*string, bool) {
	if o == nil || o.Station == nil {
		return nil, false
	}
	return o.Station, true
}

// HasStation returns a boolean if a field has been set.
func (o *Observation) HasStation() bool {
	if o != nil && o.Station != nil {
		return true
	}

	return false
}

// SetStation gets a reference to the given string and assigns it to the Station field.
func (o *Observation) SetStation(v string) {
	o.Station = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Observation) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Observation) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *Observation) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetRawMessage returns the RawMessage field value if set, zero value otherwise.
func (o *Observation) GetRawMessage() string {
	if o == nil || o.RawMessage == nil {
		var ret string
		return ret
	}
	return *o.RawMessage
}

// GetRawMessageOk returns a tuple with the RawMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetRawMessageOk() (*string, bool) {
	if o == nil || o.RawMessage == nil {
		return nil, false
	}
	return o.RawMessage, true
}

// HasRawMessage returns a boolean if a field has been set.
func (o *Observation) HasRawMessage() bool {
	if o != nil && o.RawMessage != nil {
		return true
	}

	return false
}

// SetRawMessage gets a reference to the given string and assigns it to the RawMessage field.
func (o *Observation) SetRawMessage(v string) {
	o.RawMessage = &v
}

// GetTextDescription returns the TextDescription field value if set, zero value otherwise.
func (o *Observation) GetTextDescription() string {
	if o == nil || o.TextDescription == nil {
		var ret string
		return ret
	}
	return *o.TextDescription
}

// GetTextDescriptionOk returns a tuple with the TextDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetTextDescriptionOk() (*string, bool) {
	if o == nil || o.TextDescription == nil {
		return nil, false
	}
	return o.TextDescription, true
}

// HasTextDescription returns a boolean if a field has been set.
func (o *Observation) HasTextDescription() bool {
	if o != nil && o.TextDescription != nil {
		return true
	}

	return false
}

// SetTextDescription gets a reference to the given string and assigns it to the TextDescription field.
func (o *Observation) SetTextDescription(v string) {
	o.TextDescription = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
// Deprecated
func (o *Observation) GetIcon() string {
	if o == nil || o.Icon == nil {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Observation) GetIconOk() (*string, bool) {
	if o == nil || o.Icon == nil {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Observation) HasIcon() bool {
	if o != nil && o.Icon != nil {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
// Deprecated
func (o *Observation) SetIcon(v string) {
	o.Icon = &v
}

// GetPresentWeather returns the PresentWeather field value if set, zero value otherwise.
func (o *Observation) GetPresentWeather() []MetarPhenomenon {
	if o == nil || o.PresentWeather == nil {
		var ret []MetarPhenomenon
		return ret
	}
	return o.PresentWeather
}

// GetPresentWeatherOk returns a tuple with the PresentWeather field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetPresentWeatherOk() ([]MetarPhenomenon, bool) {
	if o == nil || o.PresentWeather == nil {
		return nil, false
	}
	return o.PresentWeather, true
}

// HasPresentWeather returns a boolean if a field has been set.
func (o *Observation) HasPresentWeather() bool {
	if o != nil && o.PresentWeather != nil {
		return true
	}

	return false
}

// SetPresentWeather gets a reference to the given []MetarPhenomenon and assigns it to the PresentWeather field.
func (o *Observation) SetPresentWeather(v []MetarPhenomenon) {
	o.PresentWeather = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *Observation) GetTemperature() QuantitativeValue {
	if o == nil || o.Temperature == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetTemperatureOk() (*QuantitativeValue, bool) {
	if o == nil || o.Temperature == nil {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *Observation) HasTemperature() bool {
	if o != nil && o.Temperature != nil {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given QuantitativeValue and assigns it to the Temperature field.
func (o *Observation) SetTemperature(v QuantitativeValue) {
	o.Temperature = &v
}

// GetDewpoint returns the Dewpoint field value if set, zero value otherwise.
func (o *Observation) GetDewpoint() QuantitativeValue {
	if o == nil || o.Dewpoint == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.Dewpoint
}

// GetDewpointOk returns a tuple with the Dewpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetDewpointOk() (*QuantitativeValue, bool) {
	if o == nil || o.Dewpoint == nil {
		return nil, false
	}
	return o.Dewpoint, true
}

// HasDewpoint returns a boolean if a field has been set.
func (o *Observation) HasDewpoint() bool {
	if o != nil && o.Dewpoint != nil {
		return true
	}

	return false
}

// SetDewpoint gets a reference to the given QuantitativeValue and assigns it to the Dewpoint field.
func (o *Observation) SetDewpoint(v QuantitativeValue) {
	o.Dewpoint = &v
}

// GetWindDirection returns the WindDirection field value if set, zero value otherwise.
func (o *Observation) GetWindDirection() QuantitativeValue {
	if o == nil || o.WindDirection == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.WindDirection
}

// GetWindDirectionOk returns a tuple with the WindDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetWindDirectionOk() (*QuantitativeValue, bool) {
	if o == nil || o.WindDirection == nil {
		return nil, false
	}
	return o.WindDirection, true
}

// HasWindDirection returns a boolean if a field has been set.
func (o *Observation) HasWindDirection() bool {
	if o != nil && o.WindDirection != nil {
		return true
	}

	return false
}

// SetWindDirection gets a reference to the given QuantitativeValue and assigns it to the WindDirection field.
func (o *Observation) SetWindDirection(v QuantitativeValue) {
	o.WindDirection = &v
}

// GetWindSpeed returns the WindSpeed field value if set, zero value otherwise.
func (o *Observation) GetWindSpeed() QuantitativeValue {
	if o == nil || o.WindSpeed == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.WindSpeed
}

// GetWindSpeedOk returns a tuple with the WindSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetWindSpeedOk() (*QuantitativeValue, bool) {
	if o == nil || o.WindSpeed == nil {
		return nil, false
	}
	return o.WindSpeed, true
}

// HasWindSpeed returns a boolean if a field has been set.
func (o *Observation) HasWindSpeed() bool {
	if o != nil && o.WindSpeed != nil {
		return true
	}

	return false
}

// SetWindSpeed gets a reference to the given QuantitativeValue and assigns it to the WindSpeed field.
func (o *Observation) SetWindSpeed(v QuantitativeValue) {
	o.WindSpeed = &v
}

// GetWindGust returns the WindGust field value if set, zero value otherwise.
func (o *Observation) GetWindGust() QuantitativeValue {
	if o == nil || o.WindGust == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.WindGust
}

// GetWindGustOk returns a tuple with the WindGust field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetWindGustOk() (*QuantitativeValue, bool) {
	if o == nil || o.WindGust == nil {
		return nil, false
	}
	return o.WindGust, true
}

// HasWindGust returns a boolean if a field has been set.
func (o *Observation) HasWindGust() bool {
	if o != nil && o.WindGust != nil {
		return true
	}

	return false
}

// SetWindGust gets a reference to the given QuantitativeValue and assigns it to the WindGust field.
func (o *Observation) SetWindGust(v QuantitativeValue) {
	o.WindGust = &v
}

// GetBarometricPressure returns the BarometricPressure field value if set, zero value otherwise.
func (o *Observation) GetBarometricPressure() QuantitativeValue {
	if o == nil || o.BarometricPressure == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.BarometricPressure
}

// GetBarometricPressureOk returns a tuple with the BarometricPressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetBarometricPressureOk() (*QuantitativeValue, bool) {
	if o == nil || o.BarometricPressure == nil {
		return nil, false
	}
	return o.BarometricPressure, true
}

// HasBarometricPressure returns a boolean if a field has been set.
func (o *Observation) HasBarometricPressure() bool {
	if o != nil && o.BarometricPressure != nil {
		return true
	}

	return false
}

// SetBarometricPressure gets a reference to the given QuantitativeValue and assigns it to the BarometricPressure field.
func (o *Observation) SetBarometricPressure(v QuantitativeValue) {
	o.BarometricPressure = &v
}

// GetSeaLevelPressure returns the SeaLevelPressure field value if set, zero value otherwise.
func (o *Observation) GetSeaLevelPressure() QuantitativeValue {
	if o == nil || o.SeaLevelPressure == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.SeaLevelPressure
}

// GetSeaLevelPressureOk returns a tuple with the SeaLevelPressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetSeaLevelPressureOk() (*QuantitativeValue, bool) {
	if o == nil || o.SeaLevelPressure == nil {
		return nil, false
	}
	return o.SeaLevelPressure, true
}

// HasSeaLevelPressure returns a boolean if a field has been set.
func (o *Observation) HasSeaLevelPressure() bool {
	if o != nil && o.SeaLevelPressure != nil {
		return true
	}

	return false
}

// SetSeaLevelPressure gets a reference to the given QuantitativeValue and assigns it to the SeaLevelPressure field.
func (o *Observation) SetSeaLevelPressure(v QuantitativeValue) {
	o.SeaLevelPressure = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *Observation) GetVisibility() QuantitativeValue {
	if o == nil || o.Visibility == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetVisibilityOk() (*QuantitativeValue, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *Observation) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given QuantitativeValue and assigns it to the Visibility field.
func (o *Observation) SetVisibility(v QuantitativeValue) {
	o.Visibility = &v
}

// GetMaxTemperatureLast24Hours returns the MaxTemperatureLast24Hours field value if set, zero value otherwise.
func (o *Observation) GetMaxTemperatureLast24Hours() QuantitativeValue {
	if o == nil || o.MaxTemperatureLast24Hours == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.MaxTemperatureLast24Hours
}

// GetMaxTemperatureLast24HoursOk returns a tuple with the MaxTemperatureLast24Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetMaxTemperatureLast24HoursOk() (*QuantitativeValue, bool) {
	if o == nil || o.MaxTemperatureLast24Hours == nil {
		return nil, false
	}
	return o.MaxTemperatureLast24Hours, true
}

// HasMaxTemperatureLast24Hours returns a boolean if a field has been set.
func (o *Observation) HasMaxTemperatureLast24Hours() bool {
	if o != nil && o.MaxTemperatureLast24Hours != nil {
		return true
	}

	return false
}

// SetMaxTemperatureLast24Hours gets a reference to the given QuantitativeValue and assigns it to the MaxTemperatureLast24Hours field.
func (o *Observation) SetMaxTemperatureLast24Hours(v QuantitativeValue) {
	o.MaxTemperatureLast24Hours = &v
}

// GetMinTemperatureLast24Hours returns the MinTemperatureLast24Hours field value if set, zero value otherwise.
func (o *Observation) GetMinTemperatureLast24Hours() QuantitativeValue {
	if o == nil || o.MinTemperatureLast24Hours == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.MinTemperatureLast24Hours
}

// GetMinTemperatureLast24HoursOk returns a tuple with the MinTemperatureLast24Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetMinTemperatureLast24HoursOk() (*QuantitativeValue, bool) {
	if o == nil || o.MinTemperatureLast24Hours == nil {
		return nil, false
	}
	return o.MinTemperatureLast24Hours, true
}

// HasMinTemperatureLast24Hours returns a boolean if a field has been set.
func (o *Observation) HasMinTemperatureLast24Hours() bool {
	if o != nil && o.MinTemperatureLast24Hours != nil {
		return true
	}

	return false
}

// SetMinTemperatureLast24Hours gets a reference to the given QuantitativeValue and assigns it to the MinTemperatureLast24Hours field.
func (o *Observation) SetMinTemperatureLast24Hours(v QuantitativeValue) {
	o.MinTemperatureLast24Hours = &v
}

// GetPrecipitationLastHour returns the PrecipitationLastHour field value if set, zero value otherwise.
func (o *Observation) GetPrecipitationLastHour() QuantitativeValue {
	if o == nil || o.PrecipitationLastHour == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.PrecipitationLastHour
}

// GetPrecipitationLastHourOk returns a tuple with the PrecipitationLastHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetPrecipitationLastHourOk() (*QuantitativeValue, bool) {
	if o == nil || o.PrecipitationLastHour == nil {
		return nil, false
	}
	return o.PrecipitationLastHour, true
}

// HasPrecipitationLastHour returns a boolean if a field has been set.
func (o *Observation) HasPrecipitationLastHour() bool {
	if o != nil && o.PrecipitationLastHour != nil {
		return true
	}

	return false
}

// SetPrecipitationLastHour gets a reference to the given QuantitativeValue and assigns it to the PrecipitationLastHour field.
func (o *Observation) SetPrecipitationLastHour(v QuantitativeValue) {
	o.PrecipitationLastHour = &v
}

// GetPrecipitationLast3Hours returns the PrecipitationLast3Hours field value if set, zero value otherwise.
func (o *Observation) GetPrecipitationLast3Hours() QuantitativeValue {
	if o == nil || o.PrecipitationLast3Hours == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.PrecipitationLast3Hours
}

// GetPrecipitationLast3HoursOk returns a tuple with the PrecipitationLast3Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetPrecipitationLast3HoursOk() (*QuantitativeValue, bool) {
	if o == nil || o.PrecipitationLast3Hours == nil {
		return nil, false
	}
	return o.PrecipitationLast3Hours, true
}

// HasPrecipitationLast3Hours returns a boolean if a field has been set.
func (o *Observation) HasPrecipitationLast3Hours() bool {
	if o != nil && o.PrecipitationLast3Hours != nil {
		return true
	}

	return false
}

// SetPrecipitationLast3Hours gets a reference to the given QuantitativeValue and assigns it to the PrecipitationLast3Hours field.
func (o *Observation) SetPrecipitationLast3Hours(v QuantitativeValue) {
	o.PrecipitationLast3Hours = &v
}

// GetPrecipitationLast6Hours returns the PrecipitationLast6Hours field value if set, zero value otherwise.
func (o *Observation) GetPrecipitationLast6Hours() QuantitativeValue {
	if o == nil || o.PrecipitationLast6Hours == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.PrecipitationLast6Hours
}

// GetPrecipitationLast6HoursOk returns a tuple with the PrecipitationLast6Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetPrecipitationLast6HoursOk() (*QuantitativeValue, bool) {
	if o == nil || o.PrecipitationLast6Hours == nil {
		return nil, false
	}
	return o.PrecipitationLast6Hours, true
}

// HasPrecipitationLast6Hours returns a boolean if a field has been set.
func (o *Observation) HasPrecipitationLast6Hours() bool {
	if o != nil && o.PrecipitationLast6Hours != nil {
		return true
	}

	return false
}

// SetPrecipitationLast6Hours gets a reference to the given QuantitativeValue and assigns it to the PrecipitationLast6Hours field.
func (o *Observation) SetPrecipitationLast6Hours(v QuantitativeValue) {
	o.PrecipitationLast6Hours = &v
}

// GetRelativeHumidity returns the RelativeHumidity field value if set, zero value otherwise.
func (o *Observation) GetRelativeHumidity() QuantitativeValue {
	if o == nil || o.RelativeHumidity == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.RelativeHumidity
}

// GetRelativeHumidityOk returns a tuple with the RelativeHumidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetRelativeHumidityOk() (*QuantitativeValue, bool) {
	if o == nil || o.RelativeHumidity == nil {
		return nil, false
	}
	return o.RelativeHumidity, true
}

// HasRelativeHumidity returns a boolean if a field has been set.
func (o *Observation) HasRelativeHumidity() bool {
	if o != nil && o.RelativeHumidity != nil {
		return true
	}

	return false
}

// SetRelativeHumidity gets a reference to the given QuantitativeValue and assigns it to the RelativeHumidity field.
func (o *Observation) SetRelativeHumidity(v QuantitativeValue) {
	o.RelativeHumidity = &v
}

// GetWindChill returns the WindChill field value if set, zero value otherwise.
func (o *Observation) GetWindChill() QuantitativeValue {
	if o == nil || o.WindChill == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.WindChill
}

// GetWindChillOk returns a tuple with the WindChill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetWindChillOk() (*QuantitativeValue, bool) {
	if o == nil || o.WindChill == nil {
		return nil, false
	}
	return o.WindChill, true
}

// HasWindChill returns a boolean if a field has been set.
func (o *Observation) HasWindChill() bool {
	if o != nil && o.WindChill != nil {
		return true
	}

	return false
}

// SetWindChill gets a reference to the given QuantitativeValue and assigns it to the WindChill field.
func (o *Observation) SetWindChill(v QuantitativeValue) {
	o.WindChill = &v
}

// GetHeatIndex returns the HeatIndex field value if set, zero value otherwise.
func (o *Observation) GetHeatIndex() QuantitativeValue {
	if o == nil || o.HeatIndex == nil {
		var ret QuantitativeValue
		return ret
	}
	return *o.HeatIndex
}

// GetHeatIndexOk returns a tuple with the HeatIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetHeatIndexOk() (*QuantitativeValue, bool) {
	if o == nil || o.HeatIndex == nil {
		return nil, false
	}
	return o.HeatIndex, true
}

// HasHeatIndex returns a boolean if a field has been set.
func (o *Observation) HasHeatIndex() bool {
	if o != nil && o.HeatIndex != nil {
		return true
	}

	return false
}

// SetHeatIndex gets a reference to the given QuantitativeValue and assigns it to the HeatIndex field.
func (o *Observation) SetHeatIndex(v QuantitativeValue) {
	o.HeatIndex = &v
}

// GetCloudLayers returns the CloudLayers field value if set, zero value otherwise.
func (o *Observation) GetCloudLayers() []ObservationCloudLayersInner {
	if o == nil || o.CloudLayers == nil {
		var ret []ObservationCloudLayersInner
		return ret
	}
	return o.CloudLayers
}

// GetCloudLayersOk returns a tuple with the CloudLayers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Observation) GetCloudLayersOk() ([]ObservationCloudLayersInner, bool) {
	if o == nil || o.CloudLayers == nil {
		return nil, false
	}
	return o.CloudLayers, true
}

// HasCloudLayers returns a boolean if a field has been set.
func (o *Observation) HasCloudLayers() bool {
	if o != nil && o.CloudLayers != nil {
		return true
	}

	return false
}

// SetCloudLayers gets a reference to the given []ObservationCloudLayersInner and assigns it to the CloudLayers field.
func (o *Observation) SetCloudLayers(v []ObservationCloudLayersInner) {
	o.CloudLayers = v
}

func (o Observation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["@context"] = o.Context
	}
	if o.Geometry.IsSet() {
		toSerialize["geometry"] = o.Geometry.Get()
	}
	if o.Id != nil {
		toSerialize["@id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["@type"] = o.Type
	}
	if o.Elevation != nil {
		toSerialize["elevation"] = o.Elevation
	}
	if o.Station != nil {
		toSerialize["station"] = o.Station
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.RawMessage != nil {
		toSerialize["rawMessage"] = o.RawMessage
	}
	if o.TextDescription != nil {
		toSerialize["textDescription"] = o.TextDescription
	}
	if o.Icon != nil {
		toSerialize["icon"] = o.Icon
	}
	if o.PresentWeather != nil {
		toSerialize["presentWeather"] = o.PresentWeather
	}
	if o.Temperature != nil {
		toSerialize["temperature"] = o.Temperature
	}
	if o.Dewpoint != nil {
		toSerialize["dewpoint"] = o.Dewpoint
	}
	if o.WindDirection != nil {
		toSerialize["windDirection"] = o.WindDirection
	}
	if o.WindSpeed != nil {
		toSerialize["windSpeed"] = o.WindSpeed
	}
	if o.WindGust != nil {
		toSerialize["windGust"] = o.WindGust
	}
	if o.BarometricPressure != nil {
		toSerialize["barometricPressure"] = o.BarometricPressure
	}
	if o.SeaLevelPressure != nil {
		toSerialize["seaLevelPressure"] = o.SeaLevelPressure
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.MaxTemperatureLast24Hours != nil {
		toSerialize["maxTemperatureLast24Hours"] = o.MaxTemperatureLast24Hours
	}
	if o.MinTemperatureLast24Hours != nil {
		toSerialize["minTemperatureLast24Hours"] = o.MinTemperatureLast24Hours
	}
	if o.PrecipitationLastHour != nil {
		toSerialize["precipitationLastHour"] = o.PrecipitationLastHour
	}
	if o.PrecipitationLast3Hours != nil {
		toSerialize["precipitationLast3Hours"] = o.PrecipitationLast3Hours
	}
	if o.PrecipitationLast6Hours != nil {
		toSerialize["precipitationLast6Hours"] = o.PrecipitationLast6Hours
	}
	if o.RelativeHumidity != nil {
		toSerialize["relativeHumidity"] = o.RelativeHumidity
	}
	if o.WindChill != nil {
		toSerialize["windChill"] = o.WindChill
	}
	if o.HeatIndex != nil {
		toSerialize["heatIndex"] = o.HeatIndex
	}
	if o.CloudLayers != nil {
		toSerialize["cloudLayers"] = o.CloudLayers
	}
	return json.Marshal(toSerialize)
}

type NullableObservation struct {
	value *Observation
	isSet bool
}

func (v NullableObservation) Get() *Observation {
	return v.value
}

func (v *NullableObservation) Set(val *Observation) {
	v.value = val
	v.isSet = true
}

func (v NullableObservation) IsSet() bool {
	return v.isSet
}

func (v *NullableObservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservation(val *Observation) *NullableObservation {
	return &NullableObservation{value: val, isSet: true}
}

func (v NullableObservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


