/*
weather.gov API

weather.gov API

API version: 1.8.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weatherApi

import (
	"encoding/json"
)

// ObservationCollectionGeoJsonAllOf struct for ObservationCollectionGeoJsonAllOf
type ObservationCollectionGeoJsonAllOf struct {
	Features []ObservationGeoJsonAllOf `json:"features,omitempty"`
}

// NewObservationCollectionGeoJsonAllOf instantiates a new ObservationCollectionGeoJsonAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationCollectionGeoJsonAllOf() *ObservationCollectionGeoJsonAllOf {
	this := ObservationCollectionGeoJsonAllOf{}
	return &this
}

// NewObservationCollectionGeoJsonAllOfWithDefaults instantiates a new ObservationCollectionGeoJsonAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationCollectionGeoJsonAllOfWithDefaults() *ObservationCollectionGeoJsonAllOf {
	this := ObservationCollectionGeoJsonAllOf{}
	return &this
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *ObservationCollectionGeoJsonAllOf) GetFeatures() []ObservationGeoJsonAllOf {
	if o == nil || o.Features == nil {
		var ret []ObservationGeoJsonAllOf
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationCollectionGeoJsonAllOf) GetFeaturesOk() ([]ObservationGeoJsonAllOf, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *ObservationCollectionGeoJsonAllOf) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []ObservationGeoJsonAllOf and assigns it to the Features field.
func (o *ObservationCollectionGeoJsonAllOf) SetFeatures(v []ObservationGeoJsonAllOf) {
	o.Features = v
}

func (o ObservationCollectionGeoJsonAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	return json.Marshal(toSerialize)
}

type NullableObservationCollectionGeoJsonAllOf struct {
	value *ObservationCollectionGeoJsonAllOf
	isSet bool
}

func (v NullableObservationCollectionGeoJsonAllOf) Get() *ObservationCollectionGeoJsonAllOf {
	return v.value
}

func (v *NullableObservationCollectionGeoJsonAllOf) Set(val *ObservationCollectionGeoJsonAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationCollectionGeoJsonAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationCollectionGeoJsonAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationCollectionGeoJsonAllOf(val *ObservationCollectionGeoJsonAllOf) *NullableObservationCollectionGeoJsonAllOf {
	return &NullableObservationCollectionGeoJsonAllOf{value: val, isSet: true}
}

func (v NullableObservationCollectionGeoJsonAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationCollectionGeoJsonAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


